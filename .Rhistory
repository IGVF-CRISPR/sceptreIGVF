use_mit_license()
getwd()
load_all)()
load_all()
gasperini_fp <- system.file("extdata", "Gasperini_2019_sample_pilot.h5mu")
gasperini_fp
gasperini_fp <- system.file("extdata", "Gasperini_2019_sample_pilot.h5mu", package = "sceptre")
gasperini_fp
devtools::install()
gasperini_fp <- system.file("extdata", "Gasperini_2019_sample_pilot.h5mu", package = "sceptre")
gasperini_fp
gasperini_fp <- system.file("extdata", "Gasperini_2019_sample_pilot.h5mu", package = "sceptreIGVF")
document()
pkgload::dev_help('convert_mudata_to_sceptre_object')
library(sceptre)
library(MuData)
document()
library(sceptreIGVF)
library(MuData)
mudata <- readH5MU(system.file("extdata", "Gasperini_2019_sample_pilot.h5mu", package = "sceptre"))
mudata <- readH5MU(system.file("extdata", "Gasperini_2019_sample_pilot.h5mu", package = "sceptreIGVF"))
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
load_all()
document()
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
sceptre_object
document()
colnames(mudata)
mudata[["scRNA"]] |> colnames()
document()
pkgload::dev_help('add_matrix_to_mudata')
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
document()
pkgload::dev_help('add_matrix_to_mudata')
library(sceptreIGVF)
library(MuData)
# load MuData object
gasp_mudata_fp <- system.file("extdata", "Gasperini_2019_sample_pilot.h5mu", package = "sceptreIGVF")
mudata <- readH5MU(gasp_mudata_fp)
# create new matrix
cell_barcodes <- mudata[["scRNA"]] |> colnames()
num_cells <- length(cell_barcodes)
num_features <- 100
new_matrix <- matrix(
rnorm(num_features * num_cells),
nrow = num_features, ncol = num_cells,
dimnames = list(NULL, cell_barcodes)
)
mudata <- add_matrix_to_mudata(new_matrix, mudata, "new_experiment")
use_package("SingleCellExperiment")
use_package("MuData")
use_package("sceptre")
load_all()
document()
mudata <- add_matrix_to_mudata(new_matrix, mudata, "new_experiment")
?sampleMap
use_package("MultiAssayExperiment")
load_all()
mudata <- add_matrix_to_mudata(new_matrix, mudata, "new_experiment")
mudata
pryr::object_size(mudata)
library(MuData)
mudata <- readH5MU("Gasperini_2019_sample_pilot.h5mu")
mudata <- readH5MU("data-raw/Gasperini_2019_sample_pilot.h5mu")
mudata
cell_barcodes_subset <- cell_barcodes[1:100]
mudata_subset <- mudata[, cell_barcodes_subset]
mudata_subset
pryr::object_size(mudata_subset)
cell_barcodes_subset <- cell_barcodes[1:500]
mudata_subset <- mudata[, cell_barcodes_subset]
pryr::object_size(mudata_subset)
# write MuData to package
usethis::use_data(mudata_subset, overwrite = TRUE)
sample_mudata <- mudata[, cell_barcodes_subset]
# write MuData to package
usethis::use_data(sample_mudata)
load_all()
document()
pkgload::dev_help('add_matrix_to_mudata')
library(sceptreIGVF)
data(sample_mudata)
cell_barcodes <- sample_mudata[["scRNA"]] |> colnames()
num_cells <- length(cell_barcodes)
num_features <- 100
new_matrix <- matrix(
rnorm(num_features * num_cells),
nrow = num_features, ncol = num_cells,
dimnames = list(NULL, cell_barcodes)
)
mudata <- add_matrix_to_mudata(new_matrix, sample_mudata, "new_experiment")
mudata
document()
pkgload::dev_help('convert_mudata_to_sceptre_object')
sceptre_object <- convert_mudata_to_sceptre_object(sample_mudata)
sceptre_object
?sparseMatrix
use_package("Matrix")
document()
document()
?assign_grnas_sceptre
library(sceptreIGVF)
data(sample_mudata)
data(sample_mudata)
mudata <- assign_grnas(sample_mudata, method = "thresholding", threshold = 5)
load_all()
mudata <- assign_grnas(sample_mudata, method = "thresholding", threshold = 5)
mudata <- sample_mudata
sceptre_object <- convert_mudata_to_sceptre_object(mudata, include_covariates = FALSE)
sceptre_object
method = "thresholding"
... <- list(threshold = 5)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
# assign gRNAs
sceptre_object <- sceptre_object |>
sceptre::assign_grnas(method = method, ...)
sceptre_object |>
sceptre::assign_grnas(method = method, threshold = 5)
# extract sparse logical matrix of gRNA assignments
grna_assignments <- sceptre_object@initial_grna_assignment_list
grna_names <- names(grna_assignments)
cell_barcodes <- colnames(sceptre_object@grna_matrix)
j <- unlist(grna_assignments)
p <- c(0, cumsum(sapply(grna_assignments, length)))
num_rows <- length(grna_assignments)
num_cols <- sceptre_object@grna_matrix |> ncol()
grna_assignment_matrix <- Matrix::sparseMatrix(
j = j,
p = p,
dims = c(num_rows, num_cols),
dimnames = list(grna_names, cell_barcodes),
x = rep(1, length(j))
)
# add sparse logical matrix to the MuData
mudata <- add_matrix_to_mudata(
new_matrix = grna_assignment_matrix,
mudata = mudata,
experiment_name = "grna_assignment"
)
mudata
grna_assignment_matrix
sceptre_object@initial_grna_assignment_list
sceptre_object <- sceptre_object |>
sceptre::assign_grnas(method = method, threshold = 5)
# extract sparse logical matrix of gRNA assignments
grna_assignments <- sceptre_object@initial_grna_assignment_list
grna_names <- names(grna_assignments)
cell_barcodes <- colnames(sceptre_object@grna_matrix)
j <- unlist(grna_assignments)
p <- c(0, cumsum(sapply(grna_assignments, length)))
num_rows <- length(grna_assignments)
num_cols <- sceptre_object@grna_matrix |> ncol()
grna_assignment_matrix <- Matrix::sparseMatrix(
j = j,
p = p,
dims = c(num_rows, num_cols),
dimnames = list(grna_names, cell_barcodes),
x = rep(1, length(j))
)
# add sparse logical matrix to the MuData
mudata <- add_matrix_to_mudata(
new_matrix = grna_assignment_matrix,
mudata = mudata,
experiment_name = "grna_assignment"
)
mudata
load_all()
document()
library(sceptreIGVF)
# load sample MuData
data(sample_mudata)
# assign gRNAs
mudata <- assign_grnas(sample_mudata, method = "thresholding", threshold = 5)
traceback()
load_all()
mudata <- assign_grnas(sample_mudata, method = "thresholding", threshold = 5)
mudata <- sample_mudata
method = "thresholding"
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata, include_covariates = FALSE)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
print(class(sceptre_object))
sceptre_object <- sceptre_object |>
sceptre::assign_grnas(method = method)
# extract sparse logical matrix of gRNA assignments
grna_assignments <- sceptre_object@initial_grna_assignment_list
grna_names <- names(grna_assignments)
cell_barcodes <- colnames(sceptre_object@grna_matrix)
j <- unlist(grna_assignments)
p <- c(0, cumsum(sapply(grna_assignments, length)))
num_rows <- length(grna_assignments)
num_cols <- sceptre_object@grna_matrix |> ncol()
grna_assignment_matrix <- Matrix::sparseMatrix(
j = j,
p = p,
dims = c(num_rows, num_cols),
dimnames = list(grna_names, cell_barcodes),
x = rep(1, length(j))
)
# add sparse logical matrix to the MuData
mudata <- add_matrix_to_mudata(
new_matrix = grna_assignment_matrix,
mudata = mudata,
experiment_name = "grna_assignment"
)
# return MuData
return(mudata)
devtools::install()
library(sceptreIGVF)
data(sample_mudata)
mudata <- assign_grnas(sample_mudata, method = "thresholding", threshold = 5)
traceback()
document()
library(sceptreIGVF)
data(sample_mudata)
mudata <- assign_grnas_sceptre(sample_mudata, method = "thresholding", threshold = 5)
load_all()
mudata <- assign_grnas_sceptre(sample_mudata, method = "thresholding", threshold = 5)
mudata
mudata[["grna_assignment"]]
mudata[["grna_assignment"]] |> counts()
mudata[["grna_assignment"]] |> SingleCellExperiment::counts()
usethis::use_testthat()
use_test("grna-assignment")
# set gRNA threshold
threshold <- 5
# load sample MuData
data(sample_mudata)
# assign gRNAs via assign_grnas_sceptre
mudata <- assign_grnas_sceptre(sample_mudata, method = "thresholding", threshold = threshold)
package_grna_assignment_matrix <- mudata[["grna_assignment"]] |> Matrix::as.matrix()
package_grna_assignment_matrix <- mudata[["grna_assignment"]] |> SingleCellExperiment::counts()
sample_mudata
# assign gRNAs by directly thresholding gRNA matrix
grna_matrix <- sample_mudata[["guides"]] |> SingleCellExperiment::counts()
sample_mudata[["guides"]]
sample_mudata[["guides"]] |> as.matrix()
sample_mudata[["guides"]] |> class()
sample_mudata[["guides"]]@assays[[1]]
sample_mudata[["guides"]]@assays
sample_mudata[["guides"]] |> str()
sample_mudata[["guides"]]@assays@data
sample_mudata[["guides"]]@assays@data@listData
# assign gRNAs by directly thresholding gRNA matrix
grna_matrix <- sample_mudata[["guides"]]@assays@data@listData
correct_grna_assignment_matrix <- grna_matrix >= threshold
# assign gRNAs by directly thresholding gRNA matrix
grna_matrix <- sample_mudata[["guides"]]@assays@data@listData |> as.matrix()
correct_grna_assignment_matrix <- grna_matrix >= threshold
grna_matrix
sample_mudata[["guides"]]@assays@data@listData
# assign gRNAs by directly thresholding gRNA matrix
grna_matrix <- sample_mudata[["guides"]]@assays@data@listData[[1]] |> as.matrix()
grna_matrix
correct_grna_assignment_matrix <- grna_matrix >= threshold
correct_grna_assignment_matrix
package_grna_assignment_matrix <- mudata[["grna_assignment"]] |>
SingleCellExperiment::counts() |>
as.matrix()
package_grna_assignment_matrix
package_grna_assignment_matrix <- mudata[["grna_assignment"]] |>
SingleCellExperiment::counts() |>
as.matrix() > 0
package_grna_assignment_matrix
# check that the gRNA assignment matrix is correct
expect_equal(
package_grna_assignment_matrix,
correct_grna_assignment_matrix
)
load_all()
expect_equal(
package_grna_assignment_matrix,
correct_grna_assignment_matrix
)
identical(package_grna_assignment_matrix, correct_grna_assignment_matrix)
test()
check()
use_package("dplyr")
?add_matrix_to_mudata
library(sceptreIGVF)
data(sample_mudata)
cell_barcodes <- sample_mudata[["scRNA"]] |> colnames()
num_cells <- length(cell_barcodes)
num_features <- 100
new_matrix <- matrix(
rnorm(num_features * num_cells),
nrow = num_features, ncol = num_cells,
dimnames = list(NULL, cell_barcodes)
)
# add new matrix to MuData object
mudata <- add_matrix_to_mudata(new_matrix, sample_mudata, "new_experiment")
mudata
library(sceptreIGVF)
data(sample_mudata)
cell_barcodes <- sample_mudata[["scRNA"]] |> colnames()
num_cells <- length(cell_barcodes)
num_features <- 100
new_matrix <- matrix(
rnorm(num_features * num_cells),
nrow = num_features, ncol = num_cells,
dimnames = list(NULL, cell_barcodes)
)
# add new matrix to MuData object
mudata <- add_matrix_to_mudata(new_matrix, sample_mudata, "new_experiment")
mudata
example("add_matrix_to_mudata")
run_examples()
check()
library(sceptreIGVF)
data(sample_mudata)
cell_barcodes <- sample_mudata[["scRNA"]] |> colnames()
class(sample_mudata)
document()
check()
use_r("sample_mudata")
document()
?sample_mudata
document()
?sample_mudata
check()
check()
devtools::install()
setRepositories(ind=1:3) # needed to automatically install Bioconductor dependencies
devtools::install()
devtools::install_github("katsevich-lab/sceptreIGVF")
# read in the MuData object
gasperini_data_dir <- "~/code/research/Pipeline_Gasperini_2019/"
gasperini_data_fp <- paste0(
gasperini_data_dir,
"/mudata/Gasperini_2019_sample_pilot.h5mu"
)
gasperini_data <- readH5MU(gasperini_data_fp)
# load libraries
library(sceptreIGVF)
library(MuData)
library(conflicted)
# load libraries
library(sceptreIGVF)
library(sceptre)
library(MuData)
library(dplyr)
library(ggplot2)
library(conflicted)
library(kableExtra)
conflicts_prefer(dplyr::rename)
conflicts_prefer(dplyr::filter)
conflicts_prefer(base::unname)
# read in the MuData object
gasperini_data_dir <- "~/code/research/Pipeline_Gasperini_2019/"
gasperini_data_fp <- paste0(
gasperini_data_dir,
"/mudata/Gasperini_2019_sample_pilot.h5mu"
)
gasperini_data <- readH5MU(gasperini_data_fp)
# load libraries
library(sceptreIGVF)
library(sceptre)
library(MuData)
library(dplyr)
library(ggplot2)
library(conflicted)
library(kableExtra)
conflicts_prefer(dplyr::rename)
conflicts_prefer(dplyr::filter)
conflicts_prefer(base::unname)
# read in the MuData object
gasperini_data_dir <- "~/code/research/Pipeline_Gasperini_2019/"
gasperini_data_fp <- paste0(
gasperini_data_dir,
"/mudata/Gasperini_2019_sample_pilot.h5mu"
)
gasperini_data <- readH5MU(gasperini_data_fp)
gasperini_mudata <- readH5MU(gasperini_data_fp)
gasperini_mudata
gasperini_sceptre_object <- convert_mudata_to_sceptre_object(gasperini_mudata)
gasperini_sceptre_object
gasperini_mudata_updated <- assign_grnas_sceptre(
mudata = gasperini_mudata,
method = "thresholding",
threshold = 5
)
gasperini_mudata_updated
getwd()
# load libraries
library(sceptreIGVF)
library(MuData)
# read in the MuData object
gasperini_data_dir <- "~/code/research/Pipeline_Gasperini_2019/"
gasperini_data_fp <- paste0(
gasperini_data_dir,
"/mudata/Gasperini_2019_sample_pilot.h5mu"
)
gasperini_mudata <- readH5MU(gasperini_data_fp)
gasperini_mudata
colData(gasperini_mudata)
?colData
sampleMap(gasperini_mudata)
library(MultiAssayExperiment)
colData(gasperini_mudata)
sampleMap(gasperini_mudata)
