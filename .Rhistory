sampleMap(gasperini_mudata)
mudata_fp <- "~/code/research/sceptre-igvf/data/inference/gasperini_inference_input.h5mu"
library(MuData)
mudata <- readH5MU(mudata_fp)
mudata
metadata(mudata[['guide']])
scRNA_data <- mudata@ExperimentList$gene
scRNA_data
response_matrix <- scRNA_data@assays@data@listData[[1]]
response_matrix |> dim()
response_matrix |> class()
guides_data
guides_data <- mudata@ExperimentList$guide
guides_data
if(is.null(SummarizedExperiment::assayNames(mudata[['gene']]))){
SummarizedExperiment::assayNames(mudata[['gene']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['gene']])[[1]] <- 'counts'
}
SummarizedExperiment::assayNames(mudata[['guide']])[[1]] <- 'counts'
scRNA_data <- mudata@ExperimentList$gene
guides_data <- mudata@ExperimentList$guide
guides_data
guides_data@assays@data@listData |> length()
guides_data@assays@data@listData |> names()
guides_data@assays@data@listData[["counts"]]
guides_data@assays@data@listData[["guide_assignment"]]
guides_data@assays@data@listData |> length()
scRNA_data@assays@data@listData |> names()
guides_data@assays@data@listData |> names()
mudata |> rowData()
mudata
colData(mudata)
library(SummarizedExperiment)
colData(mudata)
colData(mudata) |> head()
colData(mudata[['gene']]) |> head()
colData(mudata[['guide']]) |> head()
extra_covariates <- data.frame()
scRNA_data@rowRanges@elementMetadata$feature_name
guides_data@rowRanges@elementMetadata |>
as.data.frame()
rowData(mudata[['guide']])
rowData(mudata[['guide']]) |>
as.data.frame() |>
tibble::rownames_to_column(var = "grna_id") |>
dplyr::rename(grna_target = intended_target_name) |>
dplyr::select(grna_id, grna_target)
# extract information from MuData
moi <- metadata(mudata[['guide']])$moi
if(is.null(SummarizedExperiment::assayNames(mudata[['gene']]))){
SummarizedExperiment::assayNames(mudata[['gene']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['gene']])[[1]] <- 'counts'
}
SummarizedExperiment::assayNames(mudata[['guide']])[[1]] <- 'counts'
scRNA_data <- mudata@ExperimentList$gene
guides_data <- mudata@ExperimentList$guide
response_matrix <- scRNA_data@assays@data@listData[["counts"]]
# if guide assignments not present, then extract guide counts
if(length(guides_data@assays@data@listData) == 1){
grna_matrix <- guides_data@assays@data@listData[["counts"]]
}
# otherwise, extract guide assignments
else{
# if guide assignments not present, then extract guide counts
if(length(guides_data@assays@data@listData) == 1){
grna_matrix <- guides_data@assays@data@listData[["counts"]]
# otherwise, extract guide assignments
} else{
grna_matrix <- guides_data@assays@data@listData[["guide_assignment"]]
}
grna_target_data_frame <- rowData(mudata[['guide']]) |>
as.data.frame() |>
tibble::rownames_to_column(var = "grna_id") |>
dplyr::rename(grna_target = intended_target_name) |>
dplyr::select(grna_id, grna_target)
# assemble information into sceptre object
sceptre_object <- sceptre::import_data(
response_matrix = response_matrix,
grna_matrix = grna_matrix,
grna_target_data_frame = grna_target_data_frame,
moi = moi
)
grna_target_data_frame
grna_matrix[1:5,1:5]
rownames(rowData(mudata[['guide']]))
grna_ids <- rownames(rowData(mudata[['guide']]))
rownames(grna_matrix) <- grna_ids
gene_ids <- rownames(rowData(mudata[['gene']]))
rownames(response_matrix) <- gene_ids
# assemble information into sceptre object
sceptre_object <- sceptre::import_data(
response_matrix = response_matrix,
grna_matrix = grna_matrix,
grna_target_data_frame = grna_target_data_frame,
moi = moi
)
sceptre_object
mudata_guide_assignment_fp <- "~/code/research/sceptre-igvf/data/guide_assignment/gasperini_guide_assignment_input.h5mu"
mudata <- readH5MU(mudata_guide_assignment_fp)
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
load_all()
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
# extract information from MuData
moi <- metadata(mudata[['guide']])$moi
if(is.null(SummarizedExperiment::assayNames(mudata[['gene']]))){
SummarizedExperiment::assayNames(mudata[['gene']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['gene']])[[1]] <- 'counts'
}
SummarizedExperiment::assayNames(mudata[['guide']])[[1]] <- 'counts'
SummarizedExperiment::assayNames(mudata[['guide']])[[1]]
SummarizedExperiment::assayNames(mudata[['guide']])
mudata
mudata[['guide']]
assayNames(mudata[['guide']])
if(is.null(SummarizedExperiment::assayNames(mudata[['guide']]))){
SummarizedExperiment::assayNames(mudata[['guide']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['guide']])[[1]] <- 'counts'
}
load_all()
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
# assign gRNAs
sceptre_object <- sceptre_object |> sceptre::assign_grnas(method = "mixture")
# extract sparse logical matrix of gRNA assignments
grna_assignment_matrix <- extract_grna_assignment_matrix(sceptre_object)
grna_assignment_matrix |> dim()
grna_assignment_matrix[1:5,1:5]
# add sparse logical matrix to the MuData
mudata <- add_matrix_to_mudata(
new_matrix = grna_assignment_matrix,
mudata = mudata,
experiment_name = "grna_assignment"
)
mudata
# add SingleCellExperiment to MuData
cell_barcodes <- colnames(grna_assignment_matrix)
cell_barcodes |> head()
mudata[['guide']]
# add gRNA assignment matrix to MuData
mudata[['guide']]
# add gRNA assignment matrix to MuData
assays(mudata[['guide']])[['guide_assignment']] <- grna_assignment_matrix
grna_assignment_matrix[1:5,1:5]
colnames(assays(mudata[['counts']])[['guide_assignment']])
colnames(assays(mudata[['counts']])
colnames(assays(mudata[['counts']]))
colnames(assay(mudata[['counts']]))
mudata[['counts']])
mudata[['counts']]
colnames(assay(mudata[['guide']]))
colnames(grna_assignment_matrix) <- colnames(assay(mudata[['guide']]))
# add gRNA assignment matrix to MuData
assays(mudata[['guide']])[['guide_assignment']] <- grna_assignment_matrix
mudata[['guide']]
load_all()
load_all()
mudata_out <- assign_grnas_sceptre(mudata)
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
sceptre_object@formula_object
sceptre_object@covariate_data_frame
sceptre_object@covariate_data_frame|> head()
sceptre_object@covariate_data_frame |> dplyr::summarize(all(grna_n_nonzero == grna_n_umis))
mudata <- readH5MU(mudata_guide_assignment_fp)
mudata_out <- assign_grnas_sceptre(mudata)
mudata_out
mudata_out[['guide']]
mudata_guide_assignment <- readH5MU(mudata_guide_assignment_fp)
save(mudata_guide_assignment, "data")
usethis::use_data(mudata_guide_assignment)
mudata_fp <- "~/code/research/sceptre-igvf/data/inference/gasperini_inference_input.h5mu"
mudata_inference <- readH5MU(mudata_fp)
usethis::use_data(mudata_inference)
document()
document()
?assign_grnas_sceptre
library(sceptreIGVF)
# load sample MuData
data(mudata_guide_assignment)
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment)
document()
mudata_inference
metadata(mudata_inference)
metadata(mudata_inference)$pairs_to_test
metadata(mudata_inference)$pairs_to_test |> as.data.frame()
metadata(mudata_inference)$pairs_to_test |> as.data.frame() |> head()
metadata(mudata_inference)$pairs_to_test |> is.null()
metadata(mudata_guide_assignment)$pairs_to_test |> is.null()
use_r("inference")
mudata <- mudata_inference
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
pairs_to_test <- metadata(mudata_inference)$pairs_to_test |> as.data.frame()
pairs_to_test <- metadata(mudata_inference)$pairs_to_test |> as.data.frame()
pairs_to_test|> head()
discovery_pairs <- pairs_to_test |>
dplyr::rename(
grna_target = intended_target_name,
response_id = gene_id
)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(discovery_pairs = discovery_pairs)
?sceptre::import_data
?sceptre::set_analysis_parameters
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = discovery_pairs,
formula_object = formula(~ log(response_n_nonzero) + log(response_n_umis))
)
# assign gRNAs
sceptre_object <- sceptre_object |>
sceptre::assign_grnas(method = "threshold", threshold = 1)
# assign gRNAs
sceptre_object <- sceptre_object |>
sceptre::assign_grnas(method = "thresholding", threshold = 1)
# run discovery analysis
sceptre_object <- sceptre_object |>
sceptre::run_discovery_analysis()
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
pairs_to_test <- SummarizedExperiment::metadata(mudata_inference)$pairs_to_test |>
as.data.frame()
pairs_to_test <- SummarizedExperiment::metadata(mudata)$pairs_to_test |>
as.data.frame()
metadata(mudata)
SummarizedExperiment::metadata(mudata)
pairs_to_test <- MultiAssayExperiment::metadata(mudata)$pairs_to_test |>
as.data.frame()
discovery_pairs <- pairs_to_test |>
dplyr::rename(
grna_target = intended_target_name,
response_id = gene_id
)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = discovery_pairs,
formula_object = formula(~ log(response_n_nonzero) + log(response_n_umis))
)
# assign gRNAs and run default QC
sceptre_object <- sceptre_object |>
sceptre::assign_grnas(method = "thresholding", threshold = 1) |>
sceptre::run_qc()
# run discovery analysis
sceptre_object <- sceptre_object |>
sceptre::run_discovery_analysis()
sceptre::get_result(sceptre_object, analysis = "run_discovery_analysis")
pairs_to_test
# get results
discovery_results <- sceptre_object |>
sceptre::get_result(analysis = "run_discovery_analysis") |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change) |>
dplyr::rename(gene_id = response_id,
intended_target_name = grna_target,
log2_fc = log_2_fold_change)
test_results <- pairs_to_test |>
dplyr::left_join(discovery_results, by = c(intended_target_name, gene_id))
test_results <- pairs_to_test |>
dplyr::left_join(discovery_results, by = c("intended_target_name", "gene_id"))
test_results
test_results|> head()
# add results to MuData
metadata(mudata)$test_results <- test_results
load_all()
data(mudata_inference)
mudata_out <- inference_sceptre(mudata_inference)
document()
check()
document()
document()
?metadata
?formula
document()
check()
document()
check()
document()
check()
?assign_grnas_sceptre
library(sceptreIGVF)
load_all()
data(mudata_guide_assignment)
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment)
mudata <- mudata_guide_assignment
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
# assign gRNAs
sceptre_object <- sceptre_object |> sceptre::assign_grnas(method = "mixture")
# extract sparse logical matrix of gRNA assignments
grna_assignment_matrix <- extract_grna_assignment_matrix(sceptre_object)
sceptre_object
sceptre_object |> print()
print(sceptre_object)
?sceptre::`print,sceptre_object-method`
sceptre_object
sceptre_object@last_function_called
grna_assignments <- sceptre_object@initial_grna_assignment_list
if(length(grna_assignments) == 0){
return(NULL)
}
grna_names <- rownames(sceptre_object@grna_matrix)
cell_barcodes <- colnames(sceptre_object@grna_matrix)
grna_assignments <- grna_assignments[grna_names]
j <- unlist(grna_assignments)
p <- c(0, cumsum(sapply(grna_assignments, length)))
num_rows <- length(grna_assignments)
num_cols <- sceptre_object@grna_matrix |> ncol()
num_rows
grna_assignments
sceptre_object@grna_assignments_raw
sceptre_object@initial_grna_assignment_list
grna_names
sceptre_object@grna_matrix[1:5,1:5]
sceptre_object@grna_matrix
devtools::install_github("katsevich-lab/sceptre")
check()
check()
document()
check()
document()
document()
check()
document()
document()
list.files("data")
load("data/mudata_guide_assignment.rda")
load("data/mudata_inference.rda")
install.packages("roxygen2")
install.packages("roxygen2")
packageVersion("roxygen2")
update.packages(ask = FALSE, checkBuilt = TRUE)
sessionInfo()
document()
document()
list.files("man")
list.files("data")
document()
devtools::build()
document()
devtools::load_all()
data(mudata_guide_assignment)
data(mudata_inference)
document()
check()
document()
mudata_guide_assignment
mudata_inference
data(mudata_guide_assignment)
save(mudata_guide_assignment, file = "data/mudata_guide_assignment.rda")
data(mudata_inference)
save(mudata_inference, file = "data/mudata_inference.rda")
document()
build()
sessionInfo)()
sessionInfo()
document()
library(MuData)
library(MuData)
mudata_guide_assignment <- readH5MU("~/code/research/sceptre-igvf/data/guide_assignment/gasperini_guide_assignment_input.h5mu")
source("data-raw/get-data.R")
document()
document()
document()
check()
load_all()
mudata_out <- inference_sceptre(mudata_inference)
load_all()
mudata_out <- inference_sceptre(mudata_inference)
mudata_out@metadata$test_results |> head()
mudata_out <- inference_sceptre(mudata_inference, side = "left")
mudata_out@metadata$test_results |> head()
mudata_out <- inference_sceptre(mudata_inference, side = "left", resampling_mechanism = "permutations")
mudata_out@metadata$test_results |> head()
document()
pkgload::dev_help('inference_sceptre')
?sceptre::set_analysis_parameters
check()
?convert_mudata_to_sceptre_object
load_all()
?convert_mudata_to_sceptre_object
data(mudata_guide_assignment)
mudata <- mudata_guide_assignment
# extract information from MuData
moi <- MultiAssayExperiment::metadata(mudata[['guide']])$moi
if(is.null(SummarizedExperiment::assayNames(mudata[['gene']]))){
SummarizedExperiment::assayNames(mudata[['gene']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['gene']])[[1]] <- 'counts'
}
if(is.null(SummarizedExperiment::assayNames(mudata[['guide']]))){
SummarizedExperiment::assayNames(mudata[['guide']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['guide']])[[1]] <- 'counts'
}
colData(mudata)
SummarizedExperiment::colData(mudata)
SummarizedExperiment::colData(mudata) |> head()
load_all()
data(mudata_inference)
sceptre_object_inference <- convert_mudata_to_sceptre_object(mudata_inference)
sceptre_object_inference
sceptre_object_inference |> print()
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment)
sceptre::assign_grnas
data(mudata_inference)
mudata_out <- inference_sceptre(mudata_inference)
load_all()
mudata_out <- inference_sceptre(mudata_inference)
mudata_out <- inference_sceptre(mudata_inference)
inference_sceptre
#' @return A MuData object with sceptre inference results
#' @export
#'
#' @examples
#' library(sceptreIGVF)
#' # load sample MuData
#' data(mudata_inference)
#' # inference
#' mudata_out <- inference_sceptre(mudata_inference)
#' mudata_out
inference_sceptre <- function(mudata, ...) {
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
# extract set of discovery pairs to test
pairs_to_test <- MultiAssayExperiment::metadata(mudata)$pairs_to_test |>
as.data.frame()
discovery_pairs <- pairs_to_test |>
dplyr::rename(
grna_target = intended_target_name,
response_id = gene_id
)
# assemble arguments to set_analysis_parameters()
args_list <- list(...)
if("discovery_pairs" %in% names(args_list)){
warning("The `discovery_pairs` argument is ignored. The `discovery_pairs` are set from the `pairs_to_test` metadata.")
}
args_list[["discovery_pairs"]] <- discovery_pairs
if (!"formula_object" %in% names(args_list)) {
args_list$formula_object <- stats::formula(~ log(response_n_nonzero) + log(response_n_umis))
}
args_list$sceptre_object <- sceptre_object
# set analysis parameters
sceptre_object <- do.call(sceptre::set_analysis_parameters, args_list)
# extra gRNA assignment and run default QC
sceptre_object <- sceptre_object |>
sceptre::assign_grnas(method = "thresholding", threshold = 1) |>
sceptre::run_qc()
# run discovery analysis
sceptre_object <- sceptre_object |>
sceptre::run_discovery_analysis() |>
suppressWarnings() |>
suppressMessages()
# get results
discovery_results <- sceptre_object |>
sceptre::get_result(analysis = "run_discovery_analysis") |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change) |>
dplyr::rename(gene_id = response_id,
intended_target_name = grna_target,
log2_fc = log_2_fold_change)
# add results to MuData
test_results <- pairs_to_test |>
dplyr::left_join(discovery_results, by = c("intended_target_name", "gene_id"))
MultiAssayExperiment::metadata(mudata)$test_results <- test_results
# return MuData
return(mudata)
}
mudata_out <- inference_sceptre(mudata_inference)
devtools::check()
install()
mudata_guide_assignment_minimal <- MuData::readH5MU("~/code/research/sceptre-igvf/data/guide_assignment/gasperini_guide_assignment_input_minimal.h5mu")
sceptre_object <- convert_mudata_to_sceptre_object(mudata_guide_assignment_minimal)
sceptre_object
print(sceptre_object)
sceptre::print(sceptre_object)
?print
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_minimal)
mudata_inference_minimal <- MuData::readH5MU("~/code/research/sceptre-igvf/data/guide_assignment/gasperini_inference_input_minimal.h5mu")
mudata_inference_minimal <- MuData::readH5MU("~/code/research/sceptre-igvf/data/inference/gasperini_inference_input_minimal.h5mu")
mudata_out <- inference_sceptre(mudata_inference_minimal)
install()
