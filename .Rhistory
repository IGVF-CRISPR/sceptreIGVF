data("mudata_inference_papalexi")
mudata_out <- inference_sceptre(
mudata_inference_papalexi,
control_group = "complement",
formula_object = formula(~ replicate + log(response_n_nonzero) + log(response_n_umis))
)
pairs_to_test <- MultiAssayExperiment::metadata(mudata_inference_papalexi)$pairs_to_test |>
as.data.frame()
# test that metadata(mudata_out)$test_results exists
expect_true("test_results" %in% names(MultiAssayExperiment::metadata(mudata_out)))
test_results <- MultiAssayExperiment::metadata(mudata_out)$test_results
# test that test_results is a data frame
expect_true(is.data.frame(test_results))
# test that test_results has the same number of rows as pairs_to_test
expect_equal(nrow(test_results), nrow(pairs_to_test))
# test that test_results has correct column names
expect_equal(names(test_results), c(names(pairs_to_test), "p_value", "log2_fc"))
# test that median p_value for positive_control pairs is small
expect_true(test_results |>
dplyr::filter(pair_type == "positive_control") |>
dplyr::summarize(median(p_value) < 1e-10) |>
dplyr::pull())
})
test_that("Papalexi inference with extra args works", {
data("mudata_inference_papalexi")
mudata_out <- inference_sceptre(
mudata_inference_papalexi,
formula_object = formula(~ replicate + log(response_n_nonzero) + log(response_n_umis))
)
pairs_to_test <- MultiAssayExperiment::metadata(mudata_inference_papalexi)$pairs_to_test |>
as.data.frame()
# test that metadata(mudata_out)$test_results exists
expect_true("test_results" %in% names(MultiAssayExperiment::metadata(mudata_out)))
test_results <- MultiAssayExperiment::metadata(mudata_out)$test_results
# test that test_results is a data frame
expect_true(is.data.frame(test_results))
# test that test_results has the same number of rows as pairs_to_test
expect_equal(nrow(test_results), nrow(pairs_to_test))
# test that test_results has correct column names
expect_equal(names(test_results), c(names(pairs_to_test), "p_value", "log2_fc"))
# test that median p_value for positive_control pairs is small
expect_true(test_results |>
dplyr::filter(pair_type == "positive_control") |>
dplyr::summarize(median(p_value) < 1e-10) |>
dplyr::pull())
})
check()
document()
pkgload::dev_help('convert_mudata_to_sceptre_object')
library(sceptreIGVF)
# load sample MuData for guide assignment
data(mudata_guide_assignment_gasperini)
# convert MuData object to sceptre object
sceptre_object_guide_assignment <- convert_mudata_to_sceptre_object(mudata_guide_assignment_gasperini)
sceptre_object_guide_assignment
# load sample MuData for inference
data(mudata_inference_gasperini)
# convert MuData object to sceptre object
sceptre_object_inference <- convert_mudata_to_sceptre_object(mudata_inference_gasperini)
sceptre_object_inference
check()
check()
?assign_grnas_sceptre
data(mudata_guide_assignment_gasperini)
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_gasperini)
mudata_out[['grna']]
mudata_out[['guide']]
mudata_out[['guide']]@assays$guide_assignment
mudata_out[['guide']]@assays$guide_assignment
mudata_out[['guide']]@assays
mudata_out[['guide']]@assays['guide_assignment']
mudata_out[['guide']]@assays[['guide_assignment']]
mudata_out[['guide']]
mudata_out[['guide']]@assays
mudata_out[['guide']]@assays |> str()
mudata_out[['guide']] |> assays()
mudata_out[['guide']] |> SummarizedExperiment::assays()
mudata_out[['guide']] |> SummarizedExperiment::assayNames()
SummarizedExperiment::assay(mudata_out[['guide']], "guide_assignment")
use_test("guide-assignment")
data("mudata_guide_assignment_gasperini")
data("mudata_guide_assignment_gasperini")
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_gasperini)
mudata_out
names(mudata_out)
# test that mudata_out still has two experiments with names "gene" and "guide"
expect_equal(names(mudata_out), c("gene", "guide"))
assay_names <- SummarizedExperiment::assayNames(mudata_out[['guide']])
assay_names
# test that mudata_out[['guide']] has two assays, one of which is named "guide_assignment"
assay_names <- SummarizedExperiment::assayNames(mudata_out[['guide']])
expect_equal(length(assay_names), 2)
expect_true("guide_assignment" %in% assay_names)
# test that the "guide_assignment" assay is a sparse logical matrix
guide_assignment_matrix <- SummarizedExperiment::assays(mudata_out[['guide']], "guide_assignment")
# test that the "guide_assignment" assay is a sparse logical matrix
guide_assignment_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], "guide_assignment")
class(guide_assignment_matrix)
# test that the "guide_assignment" has the same dimensions as the guide counts matrix
guide_counts_assay_name <- assay_names[assay_names != "guide_assignment"]
guide_counts_assay_name
guide_counts_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], guide_counts_assay_name)
names(assays(mudata_out[['guide']]))
names(SummarizedExperiment::assays(mudata_out[['guide']]))
guide_counts_assay_name
guide_counts_assay_name %in% names(assays(mudata_out[['guide']]))
guide_counts_assay_name %in% names(SummarizedExperiment::assays(mudata_out[['guide']]))
guide_counts_assay_name
guide_counts_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], guide_counts_assay_name)
# test that the "guide_assignment" has the same dimensions as the guide counts matrix
guide_counts_assay_index <- which(assay_names != "guide_assignment")
guide_counts_assay_index
mudata_out[['guide']]
mudata_out[['guide']][[1]]
# test that the "guide_assignment" has the same dimensions as the guide counts matrix
guide_counts_assay_index <- which(assay_names != "guide_assignment")
guide_counts_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], guide_counts_assay_index)
guide_counts_matrix
expect_equal(dim(guide_assignment_matrix), dim(guide_counts_matrix))
dim(guide_assignment_matrix)
dim(guide_counts_matrix)
# test that all entries of the guide assignment matrix are zero or one
expect_true(all(guide_assignment_matrix == 0 | guide_assignment_matrix == 1))
# test that all entries of the guide assignment matrix are zero or one
expect_true(all(guide_assignment_matrix == 0))
# test that all entries of the guide assignment matrix are zero or one
expect_true(all(guide_assignment_matrix == 0 | guide_assignment_matrix == 1))
test_that("Gasperini guide assignment works", {
data("mudata_guide_assignment_gasperini")
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_gasperini)
# test that mudata_out still has two experiments with names "gene" and "guide"
expect_equal(names(mudata_out), c("gene", "guide"))
# test that mudata_out[['guide']] has two assays, one of which is named "guide_assignment"
assay_names <- SummarizedExperiment::assayNames(mudata_out[['guide']])
expect_equal(length(assay_names), 2)
expect_true("guide_assignment" %in% assay_names)
# test that the "guide_assignment" has the same dimensions as the guide counts matrix
guide_counts_assay_index <- which(assay_names != "guide_assignment")
guide_counts_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], guide_counts_assay_index)
guide_assignment_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], "guide_assignment")
expect_equal(dim(guide_assignment_matrix), dim(guide_counts_matrix))
# test that all entries of the guide assignment matrix are zero or one
expect_true(all(guide_assignment_matrix == 0 | guide_assignment_matrix == 1))
})
test_that("Papalexi guide assignment works", {
data("mudata_guide_assignment_papalexi")
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_papalexi)
# test that mudata_out still has two experiments with names "gene" and "guide"
expect_equal(names(mudata_out), c("gene", "guide"))
# test that mudata_out[['guide']] has two assays, one of which is named "guide_assignment"
assay_names <- SummarizedExperiment::assayNames(mudata_out[['guide']])
expect_equal(length(assay_names), 2)
expect_true("guide_assignment" %in% assay_names)
# test that the "guide_assignment" has the same dimensions as the guide counts matrix
guide_counts_assay_index <- which(assay_names != "guide_assignment")
guide_counts_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], guide_counts_assay_index)
guide_assignment_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], "guide_assignment")
expect_equal(dim(guide_assignment_matrix), dim(guide_counts_matrix))
# test that all entries of the guide assignment matrix are zero or one
expect_true(all(guide_assignment_matrix == 0 | guide_assignment_matrix == 1))
})
data("mudata_guide_assignment_papalexi")
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_papalexi)
mudata <- mudata_guide_assignment_papalexi
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
),
formula_object = stats::formula(~ log(response_n_nonzero) + log(response_n_umis))
)
# assign gRNAs
sceptre_object <- sceptre_object |> sceptre::assign_grnas(method = "mixture")
?sceptre::assign_grnas
sceptre_object
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
sceptre_object@covariate_data_frame
?tryCatch
mudata
colData(mudata)
MultiAssayExperiment::colData(mudata)
MultiAssayExperiment::colData(mudata) <- NULL
MultiAssayExperiment::colData(mudata) <- DataFrame()
MultiAssayExperiment::colData(mudata)
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
mudata <- mudata_guide_assignment_gasperini
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
MultiAssayExperiment::colData(mudata) <- MultiAssayExperiment::colData(mudata)[,0]
MultiAssayExperiment::colData(mudata)
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
sceptre_object
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
# assign gRNAs
sceptre_object <- sceptre_object |> sceptre::assign_grnas(method = "mixture")
# extract sparse logical matrix of gRNA assignments
grna_assignment_matrix <- extract_grna_assignment_matrix(sceptre_object)
colnames(grna_assignment_matrix) <- colnames(MultiAssayExperiment::assay(mudata[['guide']]))
# add gRNA assignment matrix to MuData
SummarizedExperiment::assays(mudata[['guide']])[['guide_assignment']] <- grna_assignment_matrix
# return MuData
return(mudata)
# extract information from MuData
moi <- MultiAssayExperiment::metadata(mudata[['guide']])$moi
if(is.null(SummarizedExperiment::assayNames(mudata[['gene']]))){
SummarizedExperiment::assayNames(mudata[['gene']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['gene']])[[1]] <- 'counts'
}
if(is.null(SummarizedExperiment::assayNames(mudata[['guide']]))){
SummarizedExperiment::assayNames(mudata[['guide']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['guide']])[[1]] <- 'counts'
}
SummarizedExperiment::colData(mudata) |>
as.data.frame()
mudata <- mudata_guide_assignment_papalexi
# extract information from MuData
moi <- MultiAssayExperiment::metadata(mudata[['guide']])$moi
if(is.null(SummarizedExperiment::assayNames(mudata[['gene']]))){
SummarizedExperiment::assayNames(mudata[['gene']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['gene']])[[1]] <- 'counts'
}
if(is.null(SummarizedExperiment::assayNames(mudata[['guide']]))){
SummarizedExperiment::assayNames(mudata[['guide']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['guide']])[[1]] <- 'counts'
}
scRNA_data <- mudata@ExperimentList$gene
guides_data <- mudata@ExperimentList$guide
response_matrix <- scRNA_data@assays@data@listData[["counts"]]
extra_covariates <- SummarizedExperiment::colData(mudata) |>
as.data.frame()
extra_covariates |> head()
extra_covariates |> stats::model.matrix()
?model.matrix
stats::model.matrix(formula = ~ ., data = extra_covariates)
stats::model.matrix(object = ~ ., data = extra_covariates)
stats::model.matrix(object = ~ ., data = extra_covariates) |> head()
stats::model.matrix(object = ~ ., data = extra_covariates) |> Matrix::rankMatrix()
stats::model.matrix(object = ~ ., data = extra_covariates) |> ncol()
covariates <- SummarizedExperiment::colData(mudata) |>
as.data.frame()
model_matrix <- stats::model.matrix(object = ~ ., data = covariates)
multicollinear <- Matrix::rankMatrix(model_matrix) < ncol(model_matrix)
multicollinear
#'   mudata_guide_assignment_gasperini
#' )
#' sceptre_object_guide_assignment
#' # load sample MuData for inference
#' data(mudata_inference_gasperini)
#' # convert MuData object to sceptre object
#' sceptre_object_inference <- convert_mudata_to_sceptre_object(
#'   mudata_inference_gasperini
#' )
#' sceptre_object_inference
convert_mudata_to_sceptre_object <- function(mudata, remove_collinear_covariates = FALSE){
# extract information from MuData
moi <- MultiAssayExperiment::metadata(mudata[['guide']])$moi
if(is.null(SummarizedExperiment::assayNames(mudata[['gene']]))){
SummarizedExperiment::assayNames(mudata[['gene']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['gene']])[[1]] <- 'counts'
}
if(is.null(SummarizedExperiment::assayNames(mudata[['guide']]))){
SummarizedExperiment::assayNames(mudata[['guide']]) <- 'counts'
} else{
SummarizedExperiment::assayNames(mudata[['guide']])[[1]] <- 'counts'
}
scRNA_data <- mudata@ExperimentList$gene
guides_data <- mudata@ExperimentList$guide
response_matrix <- scRNA_data@assays@data@listData[["counts"]]
if(!is.null(SummarizedExperiment::colData(mudata))){
covariates <- SummarizedExperiment::colData(mudata) |>
as.data.frame()
if(remove_collinear_covariates){
model_matrix <- stats::model.matrix(object = ~ ., data = covariates)
multicollinear <- Matrix::rankMatrix(model_matrix) < ncol(model_matrix)
if(multicollinear){
print("Removing multicollinear covariates")
extra_covariates <- data.frame()
} else{
extra_covariates <- covariates
}
} else{
extra_covariates <- covariates
}
} else{
extra_covariates <- data.frame()
}
# if guide assignments not present, then extract guide counts
if(length(guides_data@assays@data@listData) == 1){
grna_matrix <- guides_data@assays@data@listData[["counts"]]
# otherwise, extract guide assignments
} else{
grna_matrix <- guides_data@assays@data@listData[["guide_assignment"]]
}
grna_ids <- rownames(SingleCellExperiment::rowData(mudata[['guide']]))
rownames(grna_matrix) <- grna_ids
gene_ids <- rownames(SingleCellExperiment::rowData(mudata[['gene']]))
rownames(response_matrix) <- gene_ids
grna_target_data_frame <- SingleCellExperiment::rowData(mudata[['guide']]) |>
as.data.frame() |>
tibble::rownames_to_column(var = "grna_id") |>
dplyr::rename(grna_target = intended_target_name) |>
dplyr::select(grna_id, grna_target)
# assemble information into sceptre object
sceptre_object <- sceptre::import_data(
response_matrix = response_matrix,
grna_matrix = grna_matrix,
grna_target_data_frame = grna_target_data_frame,
moi = moi,
extra_covariates = extra_covariates
)
# return sceptre object
return(sceptre_object)
}
sceptre_object_guide_assignment <- convert_mudata_to_sceptre_object(
mudata_guide_assignment_gasperini)
sceptre_object_guide_assignment <- convert_mudata_to_sceptre_object(
mudata_guide_assignment_papalexi)
sceptre_object_guide_assignment <- convert_mudata_to_sceptre_object(
mudata_guide_assignment_papalexi, remove_collinear_covariates = TRUE)
#' as a new assay called "guide_assignment"
#' @export
#'
#' @examples
#' library(sceptreIGVF)
#' # load sample MuData
#' data(mudata_guide_assignment_gasperini)
#' # assign gRNAs
#' mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_gasperini)
#' mudata_out
assign_grnas_sceptre <- function(mudata) {
# convert MuData object to sceptre object, removing multicollinear covariates
sceptre_object <- convert_mudata_to_sceptre_object(
mudata,
remove_collinear_covariates = TRUE
)
# set analysis parameters
sceptre_object <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = data.frame(
grna_target = character(0),
response_id = character(0)
)
)
# assign gRNAs
sceptre_object <- sceptre_object |> sceptre::assign_grnas(method = "mixture")
# extract sparse logical matrix of gRNA assignments
grna_assignment_matrix <- extract_grna_assignment_matrix(sceptre_object)
colnames(grna_assignment_matrix) <- colnames(MultiAssayExperiment::assay(mudata[['guide']]))
# add gRNA assignment matrix to MuData
SummarizedExperiment::assays(mudata[['guide']])[['guide_assignment']] <- grna_assignment_matrix
# return MuData
return(mudata)
}
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_gasperini)
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_papalexi)
#' @return A MuData object with sceptre inference results
#' @export
#'
#' @examples
#' library(sceptreIGVF)
#' # load sample MuData
#' data(mudata_inference_gasperini)
#' # inference
#' mudata_out <- inference_sceptre(mudata_inference_gasperini)
#' mudata_out
inference_sceptre <- function(mudata, ...) {
# convert MuData object to sceptre object
sceptre_object <- convert_mudata_to_sceptre_object(mudata)
# extract set of discovery pairs to test
pairs_to_test <- MultiAssayExperiment::metadata(mudata)$pairs_to_test |>
as.data.frame()
discovery_pairs <- pairs_to_test |>
dplyr::rename(
grna_target = intended_target_name,
response_id = gene_id
)
# assemble arguments to set_analysis_parameters()
if("discovery_pairs" %in% names(args_list)){
warning("The `discovery_pairs` argument is ignored. The `discovery_pairs` are set from the `pairs_to_test` metadata.")
}
args_list[["discovery_pairs"]] <- discovery_pairs
if (!"formula_object" %in% names(args_list)) {
args_list$formula_object <- stats::formula(~ log(response_n_nonzero) + log(response_n_umis))
}
args_list$sceptre_object <- sceptre_object
# set analysis parameters
sceptre_object <- do.call(sceptre::set_analysis_parameters, args_list)
# extra gRNA assignment and turn off QC
sceptre_object <- sceptre_object |>
sceptre::assign_grnas(method = "thresholding", threshold = 1) |>
sceptre::run_qc(n_nonzero_trt_thresh = 0L,
n_nonzero_cntrl_thresh = 0L,
p_mito_threshold = 1)
# run discovery analysis
sceptre_object <- sceptre_object |>
sceptre::run_discovery_analysis()
# get results
discovery_results <- sceptre_object |>
sceptre::get_result(analysis = "run_discovery_analysis") |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change) |>
dplyr::rename(gene_id = response_id,
intended_target_name = grna_target,
log2_fc = log_2_fold_change)
# add results to MuData
test_results <- pairs_to_test |>
dplyr::left_join(discovery_results, by = c("intended_target_name", "gene_id"))
MultiAssayExperiment::metadata(mudata)$test_results <- test_results
# return MuData
return(mudata)
}
load_all()
rm(list = c("assign_grnas_sceptre", "convert_mudata_to_sceptre_object", "inference_sceptre"))
load_all()
test_that("Gasperini guide assignment works", {
data("mudata_guide_assignment_gasperini")
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_gasperini)
# test that mudata_out still has two experiments with names "gene" and "guide"
expect_equal(names(mudata_out), c("gene", "guide"))
# test that mudata_out[['guide']] has two assays, one of which is named "guide_assignment"
assay_names <- SummarizedExperiment::assayNames(mudata_out[['guide']])
expect_equal(length(assay_names), 2)
expect_true("guide_assignment" %in% assay_names)
# test that the "guide_assignment" has the same dimensions as the guide counts matrix
guide_counts_assay_index <- which(assay_names != "guide_assignment")
guide_counts_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], guide_counts_assay_index)
guide_assignment_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], "guide_assignment")
expect_equal(dim(guide_assignment_matrix), dim(guide_counts_matrix))
# test that all entries of the guide assignment matrix are zero or one
expect_true(all(guide_assignment_matrix == 0 | guide_assignment_matrix == 1))
})
test_that("Papalexi guide assignment works", {
data("mudata_guide_assignment_papalexi")
mudata_out <- assign_grnas_sceptre(mudata_guide_assignment_papalexi)
# test that mudata_out still has two experiments with names "gene" and "guide"
expect_equal(names(mudata_out), c("gene", "guide"))
# test that mudata_out[['guide']] has two assays, one of which is named "guide_assignment"
assay_names <- SummarizedExperiment::assayNames(mudata_out[['guide']])
expect_equal(length(assay_names), 2)
expect_true("guide_assignment" %in% assay_names)
# test that the "guide_assignment" has the same dimensions as the guide counts matrix
guide_counts_assay_index <- which(assay_names != "guide_assignment")
guide_counts_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], guide_counts_assay_index)
guide_assignment_matrix <- SummarizedExperiment::assay(mudata_out[['guide']], "guide_assignment")
expect_equal(dim(guide_assignment_matrix), dim(guide_counts_matrix))
# test that all entries of the guide assignment matrix are zero or one
expect_true(all(guide_assignment_matrix == 0 | guide_assignment_matrix == 1))
})
document()
check()
load_all()
test()
check()
devtools::test_file("tests/testthat/test-guide-assignment.R")
?test_active_file
testthat::test_file("tests/testthat/test-inference.R")
devtools::install()
testthat::test_file("tests/testthat/test-guide-assignment.R")
test()
devtools::test
testthat::test_file("tests/testthat/test-guide-assignment.R")
testthat::test_file("tests/testthat/test-guide-assignment.R")
testthat::test_file("tests/testthat/test-guide-assignment.R")
devtools::test(filter = "inference")
devtools::test(filter = "guide-assignment")
?mgcv::bam
?mgcv::bam
# Load the mgcv package
library(mgcv)
# Example data simulation
set.seed(123) # for reproducibility
n <- 100
x1 <- runif(n, 0, 10)
x2 <- runif(n, 0, 10)
x3 <- runif(n, 0, 10)
y <- sin(x1) + rnorm(n)
# Creating a dataframe
df <- data.frame(y, x1, x2, x3)
# Fit a GAM with variable selection via shrinkage
gam_model <- gam(y ~ s(x1, bs="cs") + s(x2, bs="cs") + s(x3, bs="cs"), data=df)
summary(gam_model)
plot(gam_model, pages=1, scale=0)
?mgcv::gam.control
